1.内置函数
	concat 字符串拼接
		select concat(t.`name`,'教',c.name) as title
		from teacher t,course c where t.id=c.teacher_id;
		
	trim(str) 去除空格
		通常去空格都是在java里处理
		
	strcmp("3","2") 比大小，会自动把字符串转成整数
		小于返回-1
		等于返回0
		大于返回1
		
	now() 获取当前时间
	
	date_format(date,fmt) 日期格式转换
		日期格式的转换放在java里处理
		select DATE_FORMAT(now(),'%H:%i:%S %Y/%m/%d'),now()
		
	date_add(date,interval expr type) 日期叠加
		日期的叠加计算可以放在mysql里
		select date_add(now(),interval 2 day)
		
	datediff(expr,expr2) 日期差
		select datediff('1990-7-21','2021-9-23')

	if(value,t,f)
		select if(3>4,1,2) 
		
	case [expr] when [value1] then [result1] ... else 
	[default] end
		select 
			case score when
			60 then '及格'
			else '不及格'
			end
		from grade
	
	case when
		select 
			case when
			score>60 then '及格'
			else '不及格'
			end
		from grade
		
2.索引
	1.凡是需要频繁用于做查找条件的字段，就给这个字段建索引
	2.不要对每个字段都建索引，因为索引是很占空间和资源
	3.索引类型
		normal
			普通索引
		fulltext
			全文索引
			用于text字段
		unique
			唯一
			建了唯一索引，该字段就无法重复。
	4.联和索引
		多个字段一起建索引
		当多个字段经常一起做查询条件的时候，就用联和索引
	
	5.建索引的前提
		该字段存的数据要有意义
	6.为什么用ddl建索引比较少用？
		当我们无法直接用可视化工具修改表结构的时候，用ddl
		比如说你没有权限修改线上的库，这时候只能用ddl编写代码，然后发给运维，让运维来执行。
		但是当一张表的数据已经成型，达到数十万条的时候，索引基本是建不了的。
		因此索引一定是在建表的时候就要定好。

3.show profiles
	可以查看自己执行了哪些sql
	
4.EXPLAIN
	查看sql的执行流程

5.视图
	不希望每次都执行很长的一段sql来查询数据，就可以用视图
	视图可以理解为是sql的快捷方式
	CREATE VIEW 视图名 AS 查询语句;
	视图不是完整的复制原表，而是引用原表的数据，如果原表进行了修改，那么视图也会改变。
	尽量少用视图
		不希望把业务逻辑写在mysql里。
		一旦视图中的某张表结构发生了变化，那么就会影响到视图的使用。
		个人感觉一套系统里，视图最多就两三张，而且这两三张视图里的表基本是不会变化。
	视图的本质就是dml

6.存储过程
		可以把它理解为是mysql的函数
		mysql本质上也是一款编程语言，既然是编程语言那肯定 产量，变量，函数
		
		
		
	
	
		
	