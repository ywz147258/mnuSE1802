多线程

1.何为多线程
	就是CPU利用等待的时间多开一个线程去执行任务
	如果cpu一直没有等待时间，那么开几个线程都一样，速度都很慢。

2.如何定义
	1.extends Thread
	2.implements Runnable
	3.callable 
		有返回值
3.停止线程
	interrupt+变量的方式停止线程
	
4.守护线程
	跟普通线程的区别在于，守护线程的停止时间以普通线程为准。
	普通线程都停止了，那么守护也会停止。

5.阻塞
	join，强迫其他线程进入等待状态。

6.yield	
	跟sleep一样都是让线程停止，区别在于，sleep是有固定的唤醒时间，yield的唤醒时间是其他的线程进入睡眠或者等待时。

7.同步
	同步也叫锁，synchronized
	保证一个 “公共” 的变量、代码段、函数在某一个时间段内只能由一个线程去执行
	缺点：
		效率低下
	优点：
		安全性很高
	
	同步写法：
		1.同步代码块
			sysnchronized(静态变量){
				//代码逻辑
			}
		2.锁加在 方法
			多个对象对应多个线程（每个线程都是一个对象的情况下）,Thread
				public synchronized static void test() 
			一个对象对应多个线程,Runnable
				public synchronized void test()  

8.wait 和 notifyall
	线程间的相互通信
	核心就是利用共有的对象进行唤醒和等待，具体操作看代码
	
9.pool
	1.newCachedThreadPool
		线程池无限大，工作依据是：前面的线程没有执行完就开新线程，如果执行完毕就用旧线程。
		缺点：	
			可能内存溢出
			
	2.newFixedThreadPool
		线程池大小固定，最多就开启限制的线程数量。
		如果没有特殊要求建议用这种，比较安全
		
	3.newSingleThreadExcutor
		从头到尾只有一个线程
		
	4.newScheduleThreadPool
		定时器，线程池的数量也是固定的，但是可以定时的启动。
		跟第二种的区别在于，第二种线程池线程关闭后就关闭了，定时器线程池可以定时唤醒。
		像爬虫就可以用这种。
	
	
	
	
	